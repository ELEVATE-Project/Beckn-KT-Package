version: '3'
services:
    zookeeper:
        image: 'confluentinc/cp-zookeeper:latest'
        attach: false
        container_name: elevate-zookeeper
        ports:
            - '2181:2181'
        environment:
            - ZOOKEEPER_CLIENT_PORT=2181
            - ZOOKEEPER_TICK_TIME=2000
        logging:
            driver: none

    kafka:
        image: confluentinc/cp-kafka:latest
        attach: false
        container_name: elevate-kafka
        ports:
            - '9092:9092'
            - '29092:29092'
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        depends_on:
            - zookeeper
        logging:
            driver: none

    kafka-connect:
        build: '.'
        image: elevate/kafka-connect:1.0.0
        attach: false
        hostname: kafka-connect
        container_name: kafka-connect
        depends_on:
            - zookeeper
            - kafka
        ports:
            - '8083:8083'
        environment:
            CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
            CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
            CONNECT_REST_PORT: 8083
            CONNECT_GROUP_ID: compose-connect-group
            CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
        logging:
            driver: json-file

    mongo:
        image: 'mongo:4.4.14'
        attach: false
        container_name: elevate-mongo
        restart: 'always'
        ports:
            - '27017:27017'
        volumes:
            - mongo-data:/data/db
        logging:
            driver: none
    redis:
        image: 'redis:7.0.0'
        attach: false
        container_name: elevate-redis
        restart: 'always'
        expose:
            - '6379'
        logging:
            driver: none
    elasticsearch:
        container_name: elevate-elasticsearch
        attach: false
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.2
        ports:
            - '9200:9200'
            - '9300:9300'
        environment:
            - 'ES_JAVA_OPTS=-Xms1g -Xmx1g'
            - 'discovery.type=single-node'
            - 'xpack.security.enabled=false'
        logging:
            driver: none

    kibana:
        container_name: elevate-kibana
        attach: false
        image: docker.elastic.co/kibana/kibana:8.5.2
        ports:
            - '5601:5601'
        environment:
            - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
        depends_on:
            - elasticsearch
        logging:
            driver: none

    postgres:
        image: postgres:latest
        attach: false
        environment:
            POSTGRES_DB: postgres
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        volumes:
            - postgres_data:/var/lib/postgresql/data
        restart: unless-stopped
        ports:
            - '5432:5432'

    pgadmin:
        image: dpage/pgadmin4
        attach: false
        environment:
            PGADMIN_DEFAULT_EMAIL: postgres@postgres.com
            PGADMIN_DEFAULT_PASSWORD: postgres
            PGADMIN_LISTEN_PORT: 80
        depends_on:
            - postgres
        restart: unless-stopped
        ports:
            - '8080:80'
        links:
            - postgres:postgres

    bap:
        build: './mentoring-bap-service/'
        container_name: elevate-bap
        image: elevate/bap:1.0
        volumes:
            - ./mentoring-bap-service/src/:/var/src
        ports:
            - '3000:3000'
        depends_on:
            - kafka
            - redis
        command: ['nodemon', 'app.js']

    bpp:
        build: './bpp1/mentoring-bpp-service/'
        container_name: elevate-bpp
        image: elevate/bpp:1.0
        volumes:
            - ./bpp1/mentoring-bpp-service/src/:/var/src
        ports:
            - '3001:3001'
        command: ['nodemon', 'app.js']
        depends_on:
            - kafka
            - redis
            - mongo

    bpp-catalog:
        build: './bpp1/mentoring-bpp-catalog-service/'
        container_name: elevate-catalog
        image: elevate/catalog:1.0
        volumes:
            - ./bpp1/mentoring-bpp-catalog-service/src/:/var/src
        ports:
            - '3002:3002'
        command: ['nodemon', 'app.js']
        depends_on:
            - redis
            - kafka

    bg-sim:
        build: './bg-sim/'
        image: elevate/bg-sim:1.0
        container_name: elevate-bg-sim
        volumes:
            - ./bg-sim/:/usr/src/app/
        ports:
            - '3003:3003'
        depends_on:
            - kafka
        command: ['nodemon', 'app.js']

    mentoring-sim:
        build: './bpp1/mentoring-sim/'
        image: elevate/mentoring-sim:2.0
        container_name: mentoring-sim
        volumes:
            - ./bpp1/mentoring-sim/:/usr/src/app/
        ports:
            - '3010:3010'
        depends_on:
            - kafka
        command: ['nodemon', 'app.js']

    neo4j:
        container_name: o-horizon-neo4j
        image: 'neo4j:latest'
        ports:
            - '7474:7474'
            - '7687:7687'
        environment:
            - NEO4J_AUTH=none
            - NEO4J_PLUGINS=["graph-data-science"]
            - NEO4J_dbms_security_procedures_unrestricted=gds.*
            - NEO4J_dbms_security_procedures_allowlist=gds.*
        volumes:
            - neo4j-data:/data

    o-horizon-recommendation:
        build: './recommendation/'
        container_name: o-horizon-recommendation
        image: o-horizon/recommendation:1.0
        volumes:
            - ./recommendation/src/:/var/src
        ports:
            - '3020:3020'
        command: ['nodemon', 'app.js']
        depends_on:
            - neo4j

volumes:
    zookeeper-data:
    kafka-data:
    mongo-data:
    postgres_data:
    neo4j-data:
